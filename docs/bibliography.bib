@online{262588213843476TryingWriteLinux,
  title = {Trying to Write a Linux Kernel Module in Zig},
  author = {262588213843476},
  url = {https://gist.github.com/daurnimator/6518ece625b9c5f143ac51274b9dacfe},
  urldate = {2024-05-11},
  abstract = {Trying to write a linux kernel module in zig. GitHub Gist: instantly share code, notes, and snippets.},
  langid = {english},
  organization = {Gist}
}

@online{ArmA64Instruction,
  title = {Arm {{A64 Instruction Set Architecture}}},
  url = {https://developer.arm.com/documentation/ddi0596/2021-03/SIMD-FP-Instructions/FMADD--Floating-point-fused-Multiply-Add--scalar--?lang=en},
  urldate = {2024-05-21}
}

@online{BillionRowChallenge,
  title = {1 {{Billion Row Challenge}}},
  url = {https://1brc.dev/},
  urldate = {2024-05-07}
}

@software{boehlandJolbyObzig2023,
  title = {Jolby/Ob-Zig.El},
  author = {Boehland, Joel},
  date = {2023-12-22T03:08:33Z},
  origdate = {2021-08-26T12:19:16Z},
  url = {https://github.com/jolby/ob-zig.el},
  urldate = {2024-03-02},
  abstract = {Org babel bindings for the Zig language}
}

@online{ComptimeZigGuide2024,
  title = {Comptime | Zig.Guide},
  date = {2024-03-02},
  url = {https://zig.guide/language-basics/comptime},
  urldate = {2024-03-17},
  abstract = {Blocks of code may be forcibly executed at compile time using the},
  langid = {english}
}

@online{CrossCompilationZig2024,
  title = {Cross Compilation | Zig.Guide},
  date = {2024-03-02},
  url = {https://zig.guide/build-system/cross-compilation},
  urldate = {2024-03-05},
  abstract = {By default, Zig will compile for your combination of CPU and OS. This can be},
  langid = {english}
}

@online{Dannyvankooten1brcC99,
  title = {Dannyvankooten/1brc: {{C99}} Implementation of the 1 {{Billion Rows Challenge}}. 1Ô∏è‚É£üêùüèéÔ∏è {{Runs}} in \textasciitilde 1.7 Seconds on My Not-so-Fast Laptop {{CPU}} w/ {{16GB RAM}}.},
  url = {https://github.com/dannyvankooten/1brc/tree/main?tab=readme-ov-file},
  urldate = {2024-03-26}
}

@online{DocumentationZigProgramming,
  title = {Documentation - {{The Zig Programming Language}}},
  url = {https://ziglang.org/documentation/0.11.0/#Introduction},
  urldate = {2024-03-02}
}

@online{DocumentationZigProgramminga,
  title = {Documentation - {{The Zig Programming Language}} - {{Vectors}}},
  url = {https://ziglang.org/documentation/0.12.0/#Vectors},
  urldate = {2024-05-21}
}

@online{ExtendingZigNathan,
  title = {Extending {{C}} with {{Zig}} ‚Äî {{Nathan}}'s {{Musings}}},
  url = {https://www.nmichaels.org/musings/zig/c-library/},
  urldate = {2024-05-11}
}

@online{GitHubPages,
  title = {{{GitHub Pages}}},
  url = {https://pages.github.com/},
  urldate = {2024-05-20},
  abstract = {Websites for you and your projects, hosted directly from your GitHub repository. Just edit, push, and your changes are live.},
  langid = {english},
  organization = {GitHub Pages}
}

@inreference{GNUEmacs2024,
  title = {{{GNU Emacs}}},
  booktitle = {Wikipedia},
  date = {2024-05-10T07:26:37Z},
  url = {https://en.wikipedia.org/w/index.php?title=GNU_Emacs&oldid=1223156216},
  urldate = {2024-05-19},
  abstract = {GNU Emacs is a free software text editor. It was created by GNU Project founder Richard Stallman, based on the Emacs editor developed for Unix operating systems. GNU Emacs has been a central component of the GNU project and a flagship project of the free software movement. Its tag line is "the extensible self-documenting text editor."},
  langid = {english},
  annotation = {Page Version ID: 1223156216}
}

@online{GnuOrg,
  title = {Gnu.Org},
  url = {https://www.gnu.org/software/emacs/manual/html_node/elisp/Introduction.html},
  urldate = {2024-05-20},
  abstract = {Introduction (GNU Emacs Lisp Reference Manual)}
}

@inreference{GoProgrammingLanguage2024,
  title = {Go (Programming Language)},
  booktitle = {Wikipedia},
  date = {2024-05-10T20:20:09Z},
  url = {https://en.wikipedia.org/w/index.php?title=Go_(programming_language)&oldid=1223244650},
  urldate = {2024-05-14},
  abstract = {Go is a statically typed, compiled high-level programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. It is syntactically similar to C, but also has memory safety, garbage collection, structural typing, and CSP-style concurrency. It is often referred to as Golang because of its former domain name, golang.org, but its proper name is Go. There are two major implementations: Google's self-hosting "gc" compiler toolchain, targeting multiple operating systems and WebAssembly. gofrontend, a frontend to other compilers, with the libgo library. With GCC the combination is gccgo; with LLVM the combination is gollvm. A third-party source-to-source compiler, GopherJS, compiles Go to JavaScript for front-end web development.},
  langid = {english},
  annotation = {Page Version ID: 1223244650}
}

@online{Hanabi1224ProgrammingLanguageBenchmarksAnother,
  title = {Hanabi1224/{{Programming-Language-Benchmarks}}: {{Yet}} Another Implementation of Computer Language Benchmarks Game},
  url = {https://github.com/hanabi1224/Programming-Language-Benchmarks},
  urldate = {2024-05-05}
}

@software{heynsRetorquereZoterobetterbibtex2024,
  title = {Retorquere/Zotero-Better-Bibtex},
  author = {Heyns, Emiliano},
  date = {2024-03-05T16:30:49Z},
  origdate = {2013-09-20T08:26:14Z},
  url = {https://github.com/retorquere/zotero-better-bibtex},
  urldate = {2024-03-05},
  abstract = {Make Zotero effective for us LaTeX holdouts},
  keywords = {bib,biblatex,bibtex,citation-keys,latex,zotero}
}

@online{IntelIntrinsicsGuide,
  title = {{{Intel}}¬Æ {{Intrinsics Guide}}},
  url = {https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html},
  urldate = {2024-05-21},
  abstract = {Intel¬Æ Intrinsics Guide includes C-style functions that provide access to other instructions without writing assembly code.},
  langid = {english},
  organization = {Intel}
}

@online{IntroducingBabel,
  title = {Introducing {{Babel}}},
  url = {https://orgmode.org/worg/org-contrib/babel/intro.html},
  urldate = {2024-05-19}
}

@online{IntroductionZigProgramming,
  title = {Introduction to the {{Zig Programming Language}} - {{Andrew Kelley}}},
  url = {https://andrewkelley.me/post/intro-to-zig.html},
  urldate = {2024-05-14}
}

@online{KnuthLiterateProgramming,
  title = {Knuth: {{Literate Programming}}},
  url = {https://www-cs-faculty.stanford.edu/~knuth/lp.html},
  urldate = {2024-05-19}
}

@software{kootenDannyvankooten1brc2024,
  title = {Dannyvankooten/1brc},
  author = {family=Kooten, given=Danny, prefix=van, useprefix=false},
  date = {2024-03-11T10:57:19Z},
  origdate = {2024-01-03T15:48:12Z},
  url = {https://github.com/dannyvankooten/1brc},
  urldate = {2024-03-26},
  abstract = {C99 implementation of the 1 Billion Rows Challenge. 1Ô∏è‚É£üêùüèéÔ∏è Runs in \textasciitilde 1.7 seconds on my not-so-fast laptop CPU w/ 16GB RAM.},
  keywords = {1brc,c11}
}

@online{LearningZigHeap,
  title = {Learning {{Zig}} - {{Heap Memory}} \& {{Allocators}}},
  url = {https://www.openmymind.net/learning_zig/heap_memory/},
  urldate = {2024-03-03}
}

@software{leeCandrewlee141brczig2024,
  title = {Candrewlee14/1brc-Zig},
  author = {Lee, Andrew},
  date = {2024-04-26T11:38:06Z},
  origdate = {2024-01-03T21:54:19Z},
  url = {https://github.com/candrewlee14/1brc-zig},
  urldate = {2024-05-05},
  abstract = {1 Billion Row Challenge in Zig}
}

@inreference{LeibnizFormula2024,
  title = {Leibniz Formula for œÄ},
  booktitle = {Wikipedia},
  date = {2024-04-04T03:00:34Z},
  url = {https://en.wikipedia.org/w/index.php?title=Leibniz_formula_for_%CF%80&oldid=1217146933},
  urldate = {2024-04-14},
  abstract = {In mathematics, the Leibniz formula for œÄ, named after Gottfried Wilhelm Leibniz, states that an alternating series. It is sometimes called the Madhava‚ÄìLeibniz series as it was first discovered by the Indian mathematician Madhava of Sangamagrama or his followers in the 14th‚Äì15th century (see Madhava series), and was later independently rediscovered by James Gregory in 1671 and Leibniz in 1673. The Taylor series for the inverse tangent function, often called Gregory's series, is The Leibniz formula is the special case arctan‚Å°1=14œÄ.\{\textbackslash textstyle \textbackslash arctan 1=\{\textbackslash tfrac \{1\}\{4\}\}\textbackslash pi .\}It also is the Dirichlet L-series of the non-principal Dirichlet character of modulus 4 evaluated at s=1,\{\textbackslash displaystyle s=1,\} and therefore the value Œ≤(1) of the Dirichlet beta function.},
  langid = {english},
  annotation = {Page Version ID: 1217146933}
}

@online{MeasureElapsedTime,
  title = {Measure the Elapsed Time between Two Code Sections - {{Zig}} Cookbook},
  url = {https://zigcc.github.io/zig-cookbook/03-01-elapsed-time.html},
  urldate = {2024-03-17}
}

@software{mykolaichukAlmmiko1brczig2024,
  title = {Almmiko/1brc-Zig},
  author = {Mykolaichuk, Alexander},
  date = {2024-03-17T15:28:18Z},
  origdate = {2024-01-23T14:26:30Z},
  url = {https://github.com/almmiko/1brc-zig},
  urldate = {2024-03-26},
  abstract = {The One Billion Row Challenge ‚ö° -- how quickly 1B rows from a text file can be aggregated with Zig}
}

@online{NiklasheerSpeedcomparisonRepo,
  title = {Niklas-Heer/Speed-Comparison: {{A}} Repo Which Compares the Speed of Different Programming Languages.},
  url = {https://github.com/niklas-heer/speed-comparison/tree/master},
  urldate = {2024-03-26}
}

@software{nrdmnNrdmnZig_kernel_module2023,
  title = {Nrdmn/Zig\_kernel\_module},
  author = {{nrdmn}},
  date = {2023-01-28T12:15:18Z},
  origdate = {2019-06-02T12:18:05Z},
  url = {https://github.com/nrdmn/zig_kernel_module},
  urldate = {2024-05-11},
  abstract = {A 'hello world' linux kernel module in Zig},
  keywords = {kernel,linux,zig}
}

@online{NrdmnZig_kernel_moduleHello,
  title = {Nrdmn/Zig\_kernel\_module: {{A}} 'hello World' Linux Kernel Module in {{Zig}}},
  url = {https://github.com/nrdmn/zig_kernel_module/tree/master},
  urldate = {2024-05-11}
}

@online{OneBillionRows2024,
  title = {One {{Billion Rows Challenge}} in {{C}}},
  date = {2024-01-04},
  url = {https://www.dannyvankooten.com/blog/2024/1brc/},
  urldate = {2024-05-05},
  langid = {english},
  organization = {Danny van Kooten}
}

@online{OneBillionRows2024a,
  title = {One {{Billion Rows Challenge}} in {{C}}},
  date = {2024-01-04},
  url = {https://www.dannyvankooten.com/blog/2024/1brc/},
  urldate = {2024-05-07},
  langid = {english},
  organization = {Danny van Kooten}
}

@online{OrgMode,
  title = {Org {{Mode}}},
  url = {https://orgmode.org},
  urldate = {2024-03-02},
  abstract = {Org-mode. Complex so you don't have to be. A versatile organisational system with immense capabilities.},
  langid = {english}
}

@software{OvenshBun2024,
  title = {Oven-Sh/Bun},
  date = {2024-03-02T14:11:47Z},
  origdate = {2021-04-14T00:48:17Z},
  url = {https://github.com/oven-sh/bun},
  urldate = {2024-03-02},
  abstract = {Incredibly fast JavaScript runtime, bundler, test runner, and package manager ‚Äì all in one},
  organization = {Bun},
  keywords = {bun,bundler,javascript,javascriptcore,jsx,nodejs,npm,react,transpiler,typescript,zig,ziglang}
}

@software{peterHyperfine2023,
  title = {Hyperfine},
  author = {Peter, David},
  date = {2023-03},
  origdate = {2018-01-13T15:49:54Z},
  url = {https://github.com/sharkdp/hyperfine},
  urldate = {2024-04-23},
  abstract = {A command-line benchmarking tool},
  version = {1.16.1}
}

@online{PismiceHEIG_ZIG,
  title = {Pismice/{{HEIG}}\_{{ZIG}}},
  url = {https://github.com/Pismice/HEIG_ZIG},
  urldate = {2024-03-19}
}

@inreference{ProjectJupyter2024,
  title = {Project {{Jupyter}}},
  booktitle = {Wikipedia},
  date = {2024-03-21T17:31:46Z},
  url = {https://en.wikipedia.org/w/index.php?title=Project_Jupyter&oldid=1214864300},
  urldate = {2024-05-19},
  abstract = {Project Jupyter ( ) is a project to develop open-source software, open standards, and services for interactive computing across multiple programming languages. It was spun off from IPython in 2014 by Fernando P√©rez and Brian Granger. Project Jupyter's name is a reference to the three core programming languages supported by Jupyter, which are Julia, Python and R. Its name and logo are an homage to Galileo's discovery of the moons of Jupiter, as documented in notebooks attributed to Galileo. Jupyter is financially sponsored by NumFOCUS.},
  langid = {english},
  annotation = {Page Version ID: 1214864300}
}

@article{puschelSpring2020Lecture,
  title = {Spring 2020 {{Lecture}}: {{SIMD}} Extensions, {{AVX}}, Compiler Vectorization},
  author = {P√ºschel, Markus and Zhang, Ce and Rivera, Joao and Karlas, Bojan},
  langid = {english}
}

@online{RenameStdOs,
  title = {Rename Std.Os to Std.Posix ¬∑ {{Issue}} \#5019 ¬∑ Ziglang/Zig},
  url = {https://github.com/ziglang/zig/issues/5019},
  urldate = {2024-05-20}
}

@inreference{RustProgrammingLanguage2024,
  title = {Rust (Programming Language)},
  booktitle = {Wikipedia},
  date = {2024-05-07T04:07:48Z},
  url = {https://en.wikipedia.org/w/index.php?title=Rust_(programming_language)&oldid=1222651364},
  urldate = {2024-05-14},
  abstract = {Rust is a multi-paradigm, general-purpose programming language that emphasizes performance, type safety, and concurrency. It enforces memory safety‚Äîmeaning that all references point to valid memory‚Äîwithout a garbage collector. To simultaneously enforce memory safety and prevent data races, its "borrow checker" tracks the object lifetime of all references in a program during compilation. Rust was influenced by ideas from functional programming, including immutability, higher-order functions, and algebraic data types. It is popular for systems programming. Software developer Graydon Hoare created Rust as a personal project while working at Mozilla Research in 2006. Mozilla officially sponsored the project in 2009. In the years following the first stable release in May 2015, Rust was adopted by companies including Amazon, Discord, Dropbox, Google (Alphabet), Meta, and Microsoft. In December 2022, it became the first language other than C and assembly to be supported in the development of the Linux kernel. Rust has been noted for its rapid adoption, and has been studied in programming language theory research.},
  langid = {english},
  annotation = {Page Version ID: 1222651364}
}

@software{simonyiAndrassimonyiCiteprocel2023,
  title = {Andras-Simonyi/Citeproc-El},
  author = {Simonyi, Andr√°s},
  date = {2023-11-12T18:03:02Z},
  origdate = {2017-12-18T22:18:54Z},
  url = {https://github.com/andras-simonyi/citeproc-el},
  urldate = {2024-03-05},
  abstract = {A  CSL 1.0.2 Citation Processor for Emacs.},
  keywords = {bibliography,bibtex,citation,citation-processor,citation-style-language,citeproc,csl,emacs,rendering-citations}
}

@online{SourceCodeBlocks,
  title = {C, {{C}}++, {{D Source Code Blocks}} in {{Org Mode}}},
  url = {https://orgmode.org/worg//org-contrib/babel/languages/ob-doc-C.html},
  urldate = {2024-03-02}
}

@inreference{StreamingSIMDExtensions2023,
  title = {Streaming {{SIMD Extensions}}},
  booktitle = {Wikipedia},
  date = {2023-10-07T08:15:09Z},
  url = {https://en.wikipedia.org/w/index.php?title=Streaming_SIMD_Extensions&oldid=1179009683},
  urldate = {2024-04-14},
  abstract = {In computing, Streaming SIMD Extensions (SSE) is a single instruction, multiple data (SIMD) instruction set extension to the x86 architecture, designed by Intel and introduced in 1999 in their Pentium III series of central processing units (CPUs) shortly after the appearance of Advanced Micro Devices (AMD's) 3DNow!. SSE contains 70 new instructions (65 unique mnemonics using 70 encodings), most of which work on single precision floating-point data. SIMD instructions can greatly increase performance when exactly the same operations are to be performed on multiple data objects. Typical applications are digital signal processing and graphics processing. Intel's first IA-32 SIMD effort was the MMX instruction set. MMX had two main problems: it re-used existing x87 floating-point registers making the CPUs unable to work on both floating-point and SIMD data at the same time, and it only worked on integers. SSE floating-point instructions operate on a new independent register set, the XMM registers, and adds a few integer instructions that work on MMX registers. SSE was subsequently expanded by Intel to SSE2, SSE3, SSSE3 and SSE4. Because it supports floating-point math, it had wider applications than MMX and became more popular. The addition of integer support in SSE2 made MMX largely redundant, though further performance increases can be attained in some situations by using MMX in parallel with SSE operations. SSE was originally called Katmai New Instructions (KNI), Katmai being the code name for the first Pentium III core revision. During the Katmai project Intel sought to distinguish it from their earlier product line, particularly their flagship Pentium II. It was later renamed Internet Streaming SIMD Extensions (ISSE), then SSE. AMD eventually added support for SSE instructions, starting with its Athlon XP and Duron (Morgan core) processors.},
  langid = {english},
  annotation = {Page Version ID: 1179009683}
}

@online{tecJuly20212021,
  title = {July 2021},
  author = {TEC},
  date = {2021-07-31T00:00:00+0800},
  url = {https://blog.tecosaur.com/tmio/2021-07-31-citations.html},
  urldate = {2024-03-05},
  abstract = {Introducing citations!},
  langid = {english}
}

@software{thalheimMic92ZigKo2024,
  title = {Mic92/Zig.Ko},
  author = {Thalheim, J√∂rg},
  date = {2024-04-21T13:32:07Z},
  origdate = {2019-08-11T10:45:20Z},
  url = {https://github.com/Mic92/zig.ko},
  urldate = {2024-05-11},
  abstract = {Linux kernel module written in Zig}
}

@software{wangyiWangyifudanWyhash2024,
  title = {Wangyi-Fudan/Wyhash},
  author = {WangYi, Áéã‰∏Ä},
  date = {2024-05-12T15:10:34Z},
  origdate = {2019-03-06T06:57:06Z},
  url = {https://github.com/wangyi-fudan/wyhash},
  urldate = {2024-05-12},
  abstract = {The FASTEST QUALITY hash function, random number generators (PRNG) and hash map.},
  keywords = {bloom-filter,c,fast,hash,hashmap,random-number-generators,simple}
}

@online{WelcomeZigGuide2024,
  title = {Welcome | Zig.Guide},
  date = {2024-01-07},
  url = {https://zig.guide/},
  urldate = {2024-03-02},
  abstract = {Get started with the Zig programming language. Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.},
  langid = {english}
}

@online{WhatOwnershipRust,
  title = {What Is {{Ownership}}? - {{The Rust Programming Language}}},
  url = {https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html},
  urldate = {2024-05-11}
}

@software{ZiglangZig2024,
  title = {Ziglang/Zig},
  date = {2024-03-02T15:44:08Z},
  origdate = {2015-08-06T00:51:28Z},
  url = {https://github.com/ziglang/zig},
  urldate = {2024-03-02},
  abstract = {General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.},
  organization = {Zig Programming Language},
  keywords = {compiler,language,zig}
}

@online{ZigMetaprogrammingGamedev,
  title = {Zig {{Metaprogramming}} - {{Gamedev Guide}}},
  url = {https://ikrima.dev/dev-notes/zig/zig-metaprogramming/},
  urldate = {2024-03-19}
}

@online{ZigVSBenchmarks,
  title = {Zig {{VS C}} Benchmarks, {{Which}} Programming Language or Compiler Is Faster},
  url = {https://programming-language-benchmarks.vercel.app/zig-vs-c},
  urldate = {2024-05-05}
}
