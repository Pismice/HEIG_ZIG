** comptime
As the name implies, the `comptime` keyword is used to evaluate an expression at compile time. This is useful when you want to ensure that a certain value is known at compile time, or when you want to generate code based on a compile-time value.

*** When to use 'comptime'
**** Assuring a value is known at compile time
When you want to ensure that a certain value is known at compile time (e.g. the size of an array)

**** Performance
To assure the compiler that he can do certains things at compilation time in order to optimize performances by not doing certain things at runtime. (if the compiler gives you the power to do things at compile time so easily, you should use it)

**** Adaptation to certain libraries
Sometime you might need to pass comptime arguments to functions given by certains libraries, in this case you might adapt what you pass to the function to be comptime evaluated.

**** Generics

*** When NOT to use 'comptime' (taken from the Ziglings exercises)
The following contexts are already IMPLICITLY evaluated at
compile time, and adding the 'comptime' keyword would be
superfluous, redundant, and smelly:

   - The container-level scope (outside of any function in a source file)
   - Type declarations of:
       - Variables
       - Functions (types of parameters and return values)
       - Structs
       - Unions
       - Enums
   - The test expressions in inline for and while loops
   - An expression passed to the @cImport() builtin

*** Other sources
Here is a very nice blog written by a core member of the ZIG communicty: https://kristoff.it/blog/what-is-zig-comptime/
