#+title: Compiler messages
#+weight: 10

** Compiler messages
In a language that aims to report most of its issues at compilation time, it is important to have clear and concise error messages. However at the time we are writing this it is sadly not the case. Here are a few compiler messages that you might encounter that are very hard to understand:

*** Trying to print without the correct struct syntax
We are going to start with the most basic one, everyone doing Zig did at least one time
#+begin_src zig :imports '(std) :main 'yes :testsuite 'no
  std.debug.print("Hello I am {} years old", 12);
#+end_src

#+begin_example
  /home/tetratrux/.zvm/0.11.0/lib/std/fmt.zig:87:9: error: expected tuple or struct argument, found comptime_int
          @compileError("expected tuple or struct argument, found " ++ @typeName(ArgsType));
#+end_example

Is the type of error you should get, from reading that we cant even know from where the problem is in our code, no line number, no stacktrace, nothing.

But if you read the message carefully and you know that [[https://ziglang.org/documentation/master/std/#std.debug.print][print]] second argument except a struct with the *.{}* syntax, you realize that you passed a value with the wrong type.

So when you get that type of error message make sure that you are printing your message correctly with the second argument that should be a struct with the *.{}* syntax.

#+begin_src zig :imports '(std) :main 'yes :testsuite 'no
  std.debug.print("Hello I am {} years old", .{12});
#+end_src

This is an [[https://github.com/ziglang/zig/issues/19158][ongoing issue]] by the time I am writing this in 0.12.0

*** Assigning to an arrray of array of u8
This is a very common thing to, if you basically want to make an "array of strings", the way you would want to do it is that way:
#+begin_src zig :imports '(std) :main 'yes :testsuite 'no
  const app_name: []const u8 = "/bin/i3-msg";
  var params: []const []const u8 = .{ app_name, "-t", "get_workspaces" };
#+end_src

But this is going to give the following error:
#+begin_example
  error: type '[]const []const u8' does not support array initialization syntax
#+end_example

With the following hint:
#+begin_example
  note: inferred array length is specified with an underscore: '[_][]const u8'
#+end_example

So you might try to follow the hint, but the hint here is not that good all, and give you false directions:
#+begin_src zig :imports '(std) :main 'yes :testsuite 'no
  var params: []const []const u8 = [_][]const u8{ app_name, "-t", "get_workspaces};
#+end_src

Ending up with the following error:
#+begin_src
  error: array literal requires address-of operator (&) to coerce to slice type '[]const []const u8'
#+end_src

And then you can finally work you way around by coming back to the first syntax and adding the *&* operator like so:
#+begin_src zig :imports '(std) :main 'yes :testsuite 'no
  var params: []const []const u8 = &.{ app_name, "-t", "get_workspaces" };
#+end_src

This is because that is the way you write [[https://discord.com/channels/605571803288698900/1243368828461912127][slice literals according to this discord discussion]]. There were no documentions related to that on the official website at the time of writing.


