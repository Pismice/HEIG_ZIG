[
  {"id":"262588213843476TryingWriteLinux","abstract":"Trying to write a linux kernel module in zig. GitHub Gist: instantly share code, notes, and snippets.","accessed":{"date-parts":[["2024",5,11]]},"author":[{"family":"262588213843476","given":""}],"citation-key":"262588213843476TryingWriteLinux","container-title":"Gist","language":"en","title":"Trying to write a linux kernel module in zig","type":"webpage","URL":"https://gist.github.com/daurnimator/6518ece625b9c5f143ac51274b9dacfe"},
  {"id":"ArmA64Instruction","accessed":{"date-parts":[["2024",5,21]]},"citation-key":"ArmA64Instruction","title":"Arm A64 Instruction Set Architecture","type":"webpage","URL":"https://developer.arm.com/documentation/ddi0596/2021-03/SIMD-FP-Instructions/FMADD--Floating-point-fused-Multiply-Add--scalar--?lang=en"},
  {"id":"BillionRowChallenge","accessed":{"date-parts":[["2024",5,7]]},"citation-key":"BillionRowChallenge","title":"1 Billion Row Challenge","type":"webpage","URL":"https://1brc.dev/"},
  {"id":"boehlandJolbyObzig2023","abstract":"Org babel bindings for the Zig language","accessed":{"date-parts":[["2024",3,2]]},"author":[{"family":"Boehland","given":"Joel"}],"citation-key":"boehlandJolbyObzig2023","genre":"Emacs Lisp","issued":{"date-parts":[["2023",12,22]]},"license":"GPL-3.0","original-date":{"date-parts":[["2021",8,26]]},"source":"GitHub","title":"jolby/ob-zig.el","type":"software","URL":"https://github.com/jolby/ob-zig.el"},
  {"id":"ComptimeZigGuide2024","abstract":"Blocks of code may be forcibly executed at compile time using the","accessed":{"date-parts":[["2024",3,17]]},"citation-key":"ComptimeZigGuide2024","issued":{"date-parts":[["2024",3,2]]},"language":"en","title":"Comptime | zig.guide","type":"webpage","URL":"https://zig.guide/language-basics/comptime"},
  {"id":"CrossCompilationZig2024","abstract":"By default, Zig will compile for your combination of CPU and OS. This can be","accessed":{"date-parts":[["2024",3,5]]},"citation-key":"CrossCompilationZig2024","issued":{"date-parts":[["2024",3,2]]},"language":"en","title":"Cross compilation | zig.guide","type":"webpage","URL":"https://zig.guide/build-system/cross-compilation"},
  {"id":"Dannyvankooten1brcC99","accessed":{"date-parts":[["2024",3,26]]},"citation-key":"Dannyvankooten1brcC99","title":"dannyvankooten/1brc: C99 implementation of the 1 Billion Rows Challenge. 1Ô∏è‚É£üêùüèéÔ∏è Runs in ~1.7 seconds on my not-so-fast laptop CPU w/ 16GB RAM.","type":"webpage","URL":"https://github.com/dannyvankooten/1brc/tree/main?tab=readme-ov-file"},
  {"id":"DocumentationZigProgramming","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"DocumentationZigProgramming","title":"Documentation - The Zig Programming Language","type":"webpage","URL":"https://ziglang.org/documentation/0.11.0/#Introduction"},
  {"id":"DocumentationZigProgramminga","accessed":{"date-parts":[["2024",5,21]]},"citation-key":"DocumentationZigProgramminga","title":"Documentation - The Zig Programming Language - Vectors","type":"webpage","URL":"https://ziglang.org/documentation/0.12.0/#Vectors"},
  {"id":"ExtendingZigNathan","accessed":{"date-parts":[["2024",5,11]]},"citation-key":"ExtendingZigNathan","title":"Extending C with Zig ‚Äî Nathan's Musings","type":"webpage","URL":"https://www.nmichaels.org/musings/zig/c-library/"},
  {"id":"GitHubPages","abstract":"Websites for you and your projects, hosted directly from your GitHub repository. Just edit, push, and your changes are live.","accessed":{"date-parts":[["2024",5,20]]},"citation-key":"GitHubPages","container-title":"GitHub Pages","language":"en","title":"GitHub Pages","type":"webpage","URL":"https://pages.github.com/"},
  {"id":"GNUEmacs2024","abstract":"GNU Emacs is a free software text editor. It was created by GNU Project founder Richard Stallman, based on the Emacs editor developed for Unix operating systems. GNU Emacs has been a central component of the GNU project and a flagship project of the free software movement. Its tag line is \"the extensible self-documenting text editor.\"","accessed":{"date-parts":[["2024",5,19]]},"citation-key":"GNUEmacs2024","container-title":"Wikipedia","issued":{"date-parts":[["2024",5,10]]},"language":"en","license":"Creative Commons Attribution-ShareAlike License","note":"Page Version ID: 1223156216","source":"Wikipedia","title":"GNU Emacs","type":"entry-encyclopedia","URL":"https://en.wikipedia.org/w/index.php?title=GNU_Emacs&oldid=1223156216"},
  {"id":"GnuOrg","abstract":"Introduction (GNU Emacs Lisp Reference Manual)","accessed":{"date-parts":[["2024",5,20]]},"citation-key":"GnuOrg","title":"gnu.org","type":"webpage","URL":"https://www.gnu.org/software/emacs/manual/html_node/elisp/Introduction.html"},
  {"id":"GoProgrammingLanguage2024","abstract":"Go is a statically typed, compiled high-level programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. It is syntactically similar to C, but also has memory safety, garbage collection, structural typing, and CSP-style concurrency. It is often referred to as Golang because of its former domain name, golang.org, but its proper name is Go.\nThere are two major implementations:\n\nGoogle's self-hosting \"gc\" compiler toolchain, targeting multiple operating systems and WebAssembly.\ngofrontend, a frontend to other compilers, with the libgo library. With GCC the combination is gccgo; with LLVM the combination is gollvm.\nA third-party source-to-source compiler, GopherJS, compiles Go to JavaScript for front-end web development.","accessed":{"date-parts":[["2024",5,14]]},"citation-key":"GoProgrammingLanguage2024","container-title":"Wikipedia","issued":{"date-parts":[["2024",5,10]]},"language":"en","license":"Creative Commons Attribution-ShareAlike License","note":"Page Version ID: 1223244650","source":"Wikipedia","title":"Go (programming language)","type":"entry-encyclopedia","URL":"https://en.wikipedia.org/w/index.php?title=Go_(programming_language)&oldid=1223244650"},
  {"id":"Hanabi1224ProgrammingLanguageBenchmarksAnother","accessed":{"date-parts":[["2024",5,5]]},"citation-key":"Hanabi1224ProgrammingLanguageBenchmarksAnother","title":"hanabi1224/Programming-Language-Benchmarks: Yet another implementation of computer language benchmarks game","type":"webpage","URL":"https://github.com/hanabi1224/Programming-Language-Benchmarks"},
  {"id":"heynsRetorquereZoterobetterbibtex2024","abstract":"Make Zotero effective for us LaTeX holdouts","accessed":{"date-parts":[["2024",3,5]]},"author":[{"family":"Heyns","given":"Emiliano"}],"citation-key":"heynsRetorquereZoterobetterbibtex2024","genre":"TypeScript","issued":{"date-parts":[["2024",3,5]]},"license":"MIT","original-date":{"date-parts":[["2013",9,20]]},"source":"GitHub","title":"retorquere/zotero-better-bibtex","type":"software","URL":"https://github.com/retorquere/zotero-better-bibtex"},
  {"id":"IntelIntrinsicsGuide","abstract":"Intel¬Æ Intrinsics Guide includes C-style functions that provide access to other instructions without writing assembly code.","accessed":{"date-parts":[["2024",5,21]]},"citation-key":"IntelIntrinsicsGuide","container-title":"Intel","language":"en","title":"Intel¬Æ Intrinsics Guide","type":"webpage","URL":"https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html"},
  {"id":"IntroducingBabel","accessed":{"date-parts":[["2024",5,19]]},"citation-key":"IntroducingBabel","title":"Introducing Babel","type":"webpage","URL":"https://orgmode.org/worg/org-contrib/babel/intro.html"},
  {"id":"IntroductionZigProgramming","accessed":{"date-parts":[["2024",5,14]]},"citation-key":"IntroductionZigProgramming","title":"Introduction to the Zig Programming Language - Andrew Kelley","type":"webpage","URL":"https://andrewkelley.me/post/intro-to-zig.html"},
  {"id":"KnuthLiterateProgramming","accessed":{"date-parts":[["2024",5,19]]},"citation-key":"KnuthLiterateProgramming","title":"Knuth: Literate Programming","type":"webpage","URL":"https://www-cs-faculty.stanford.edu/~knuth/lp.html"},
  {"id":"kootenDannyvankooten1brc2024","abstract":"C99 implementation of the 1 Billion Rows Challenge. 1Ô∏è‚É£üêùüèéÔ∏è Runs in ~1.7 seconds on my not-so-fast laptop CPU w/ 16GB RAM.","accessed":{"date-parts":[["2024",3,26]]},"author":[{"family":"Kooten","given":"Danny","dropping-particle":"van"}],"citation-key":"kootenDannyvankooten1brc2024","genre":"C","issued":{"date-parts":[["2024",3,11]]},"original-date":{"date-parts":[["2024",1,3]]},"source":"GitHub","title":"dannyvankooten/1brc","type":"software","URL":"https://github.com/dannyvankooten/1brc"},
  {"id":"LearningZigHeap","accessed":{"date-parts":[["2024",3,3]]},"citation-key":"LearningZigHeap","title":"Learning Zig - Heap Memory & Allocators","type":"webpage","URL":"https://www.openmymind.net/learning_zig/heap_memory/"},
  {"id":"leeCandrewlee141brczig2024","abstract":"1 Billion Row Challenge in Zig","accessed":{"date-parts":[["2024",5,5]]},"author":[{"family":"Lee","given":"Andrew"}],"citation-key":"leeCandrewlee141brczig2024","genre":"C","issued":{"date-parts":[["2024",4,26]]},"original-date":{"date-parts":[["2024",1,3]]},"source":"GitHub","title":"candrewlee14/1brc-zig","type":"software","URL":"https://github.com/candrewlee14/1brc-zig"},
  {"id":"LeibnizFormula2024","abstract":"In mathematics, the Leibniz formula for œÄ, named after Gottfried Wilhelm Leibniz, states that\n\nan alternating series.\nIt is sometimes called the Madhava‚ÄìLeibniz series as it was first discovered by the Indian mathematician Madhava of Sangamagrama or his followers in the 14th‚Äì15th century (see Madhava series), and was later independently rediscovered by James Gregory in 1671 and Leibniz in 1673. The Taylor series for the inverse tangent function, often called Gregory's series, is\n\nThe Leibniz formula is the special case arctan‚Å°1=14œÄ.{\\textstyle \\arctan 1={\\tfrac {1}{4}}\\pi .}It also is the Dirichlet L-series of the non-principal Dirichlet character of modulus 4 evaluated at s=1,{\\displaystyle s=1,} and therefore the value Œ≤(1) of the Dirichlet beta function.","accessed":{"date-parts":[["2024",4,14]]},"citation-key":"LeibnizFormula2024","container-title":"Wikipedia","issued":{"date-parts":[["2024",4,4]]},"language":"en","license":"Creative Commons Attribution-ShareAlike License","note":"Page Version ID: 1217146933","source":"Wikipedia","title":"Leibniz formula for œÄ","type":"entry-encyclopedia","URL":"https://en.wikipedia.org/w/index.php?title=Leibniz_formula_for_%CF%80&oldid=1217146933"},
  {"id":"MeasureElapsedTime","accessed":{"date-parts":[["2024",3,17]]},"citation-key":"MeasureElapsedTime","title":"Measure the elapsed time between two code sections - Zig cookbook","type":"webpage","URL":"https://zigcc.github.io/zig-cookbook/03-01-elapsed-time.html"},
  {"id":"mykolaichukAlmmiko1brczig2024","abstract":"The One Billion Row Challenge ‚ö° -- how quickly 1B rows from a text file can be aggregated with Zig","accessed":{"date-parts":[["2024",3,26]]},"author":[{"family":"Mykolaichuk","given":"Alexander"}],"citation-key":"mykolaichukAlmmiko1brczig2024","genre":"Zig","issued":{"date-parts":[["2024",3,17]]},"original-date":{"date-parts":[["2024",1,23]]},"source":"GitHub","title":"almmiko/1brc-zig","type":"software","URL":"https://github.com/almmiko/1brc-zig"},
  {"id":"NiklasheerSpeedcomparisonRepo","accessed":{"date-parts":[["2024",3,26]]},"citation-key":"NiklasheerSpeedcomparisonRepo","title":"niklas-heer/speed-comparison: A repo which compares the speed of different programming languages.","type":"webpage","URL":"https://github.com/niklas-heer/speed-comparison/tree/master"},
  {"id":"nrdmnNrdmnZig_kernel_module2023","abstract":"A 'hello world' linux kernel module in Zig","accessed":{"date-parts":[["2024",5,11]]},"author":[{"family":"nrdmn","given":""}],"citation-key":"nrdmnNrdmnZig_kernel_module2023","genre":"Zig","issued":{"date-parts":[["2023",1,28]]},"original-date":{"date-parts":[["2019",6,2]]},"source":"GitHub","title":"nrdmn/zig_kernel_module","type":"software","URL":"https://github.com/nrdmn/zig_kernel_module"},
  {"id":"NrdmnZig_kernel_moduleHello","accessed":{"date-parts":[["2024",5,11]]},"citation-key":"NrdmnZig_kernel_moduleHello","title":"nrdmn/zig_kernel_module: A 'hello world' linux kernel module in Zig","type":"webpage","URL":"https://github.com/nrdmn/zig_kernel_module/tree/master"},
  {"id":"OneBillionRows2024","accessed":{"date-parts":[["2024",5,5]]},"citation-key":"OneBillionRows2024","container-title":"Danny van Kooten","issued":{"date-parts":[["2024",1,4]]},"language":"en","title":"One Billion Rows Challenge in C","type":"webpage","URL":"https://www.dannyvankooten.com/blog/2024/1brc/"},
  {"id":"OneBillionRows2024a","accessed":{"date-parts":[["2024",5,7]]},"citation-key":"OneBillionRows2024a","container-title":"Danny van Kooten","issued":{"date-parts":[["2024",1,4]]},"language":"en","title":"One Billion Rows Challenge in C","type":"webpage","URL":"https://www.dannyvankooten.com/blog/2024/1brc/"},
  {"id":"OrgMode","abstract":"Org-mode. Complex so you don't have to be. A versatile organisational system with immense capabilities.","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"OrgMode","language":"en","title":"Org Mode","type":"webpage","URL":"https://orgmode.org"},
  {"id":"OvenshBun2024","abstract":"Incredibly fast JavaScript runtime, bundler, test runner, and package manager ‚Äì all in one","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"OvenshBun2024","genre":"Zig","issued":{"date-parts":[["2024",3,2]]},"original-date":{"date-parts":[["2021",4,14]]},"publisher":"Bun","source":"GitHub","title":"oven-sh/bun","type":"software","URL":"https://github.com/oven-sh/bun"},
  {"id":"peterHyperfine2023","abstract":"A command-line benchmarking tool","accessed":{"date-parts":[["2024",4,23]]},"author":[{"family":"Peter","given":"David"}],"citation-key":"peterHyperfine2023","genre":"Rust","issued":{"date-parts":[["2023",3]]},"license":"Apache-2.0","original-date":{"date-parts":[["2018",1,13]]},"source":"GitHub","title":"hyperfine","type":"software","URL":"https://github.com/sharkdp/hyperfine","version":"1.16.1"},
  {"id":"PismiceHEIG_ZIG","accessed":{"date-parts":[["2024",3,19]]},"citation-key":"PismiceHEIG_ZIG","title":"Pismice/HEIG_ZIG","type":"webpage","URL":"https://github.com/Pismice/HEIG_ZIG"},
  {"id":"ProjectJupyter2024","abstract":"Project Jupyter ( ) is a project to develop open-source software, open standards, and services for interactive computing across multiple programming languages.\nIt was spun off from IPython in 2014 by Fernando P√©rez and Brian Granger. Project Jupyter's name is a reference to the three core programming languages supported by Jupyter, which are Julia, Python and R. Its name and logo are an homage to Galileo's discovery of the moons of Jupiter, as documented in notebooks attributed to Galileo.\nJupyter is financially sponsored by NumFOCUS.","accessed":{"date-parts":[["2024",5,19]]},"citation-key":"ProjectJupyter2024","container-title":"Wikipedia","issued":{"date-parts":[["2024",3,21]]},"language":"en","license":"Creative Commons Attribution-ShareAlike License","note":"Page Version ID: 1214864300","source":"Wikipedia","title":"Project Jupyter","type":"entry-encyclopedia","URL":"https://en.wikipedia.org/w/index.php?title=Project_Jupyter&oldid=1214864300"},
  {"id":"puschelSpring2020Lecture","author":[{"family":"P√ºschel","given":"Markus"},{"family":"Zhang","given":"Ce"},{"family":"Rivera","given":"Joao"},{"family":"Karlas","given":"Bojan"}],"citation-key":"puschelSpring2020Lecture","language":"en","source":"Zotero","title":"Spring 2020 Lecture: SIMD extensions, AVX, compiler vectorization","type":"article-journal"},
  {"id":"RenameStdOs","accessed":{"date-parts":[["2024",5,20]]},"citation-key":"RenameStdOs","title":"rename std.os to std.posix ¬∑ Issue #5019 ¬∑ ziglang/zig","type":"webpage","URL":"https://github.com/ziglang/zig/issues/5019"},
  {"id":"RustProgrammingLanguage2024","abstract":"Rust is a multi-paradigm, general-purpose programming language that emphasizes performance, type safety, and concurrency. It enforces memory safety‚Äîmeaning that all references point to valid memory‚Äîwithout a garbage collector. To simultaneously enforce memory safety and prevent data races, its \"borrow checker\" tracks the object lifetime of all references in a program during compilation.\nRust was influenced by ideas from functional programming, including immutability, higher-order functions, and algebraic data types. It is popular for systems programming.\nSoftware developer Graydon Hoare created Rust as a personal project while working at Mozilla Research in 2006. Mozilla officially sponsored the project in 2009. In the years following the first stable release in May 2015, Rust was adopted by companies including Amazon, Discord, Dropbox, Google (Alphabet), Meta, and Microsoft. In December 2022, it became the first language other than C and assembly to be supported in the development of the Linux kernel.\nRust has been noted for its rapid adoption, and has been studied in programming language theory research.","accessed":{"date-parts":[["2024",5,14]]},"citation-key":"RustProgrammingLanguage2024","container-title":"Wikipedia","issued":{"date-parts":[["2024",5,7]]},"language":"en","license":"Creative Commons Attribution-ShareAlike License","note":"Page Version ID: 1222651364","source":"Wikipedia","title":"Rust (programming language)","type":"entry-encyclopedia","URL":"https://en.wikipedia.org/w/index.php?title=Rust_(programming_language)&oldid=1222651364"},
  {"id":"simonyiAndrassimonyiCiteprocel2023","abstract":"A  CSL 1.0.2 Citation Processor for Emacs.","accessed":{"date-parts":[["2024",3,5]]},"author":[{"family":"Simonyi","given":"Andr√°s"}],"citation-key":"simonyiAndrassimonyiCiteprocel2023","genre":"Emacs Lisp","issued":{"date-parts":[["2023",11,12]]},"license":"GPL-3.0","original-date":{"date-parts":[["2017",12,18]]},"source":"GitHub","title":"andras-simonyi/citeproc-el","type":"software","URL":"https://github.com/andras-simonyi/citeproc-el"},
  {"id":"SourceCodeBlocks","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"SourceCodeBlocks","title":"C, C++, D Source Code Blocks in Org Mode","type":"webpage","URL":"https://orgmode.org/worg//org-contrib/babel/languages/ob-doc-C.html"},
  {"id":"StreamingSIMDExtensions2023","abstract":"In computing, Streaming SIMD Extensions (SSE) is a single instruction, multiple data (SIMD) instruction set extension to the x86 architecture, designed by Intel and introduced in 1999 in their Pentium III series of central processing units (CPUs) shortly after the appearance of Advanced Micro Devices (AMD's) 3DNow!. SSE contains 70 new instructions (65 unique mnemonics using 70 encodings), most of which work on single precision floating-point data. SIMD instructions can greatly increase performance when exactly the same operations are to be performed on multiple data objects. Typical applications are digital signal processing and graphics processing.\nIntel's first IA-32 SIMD effort was the MMX instruction set. MMX had two main problems: it re-used existing x87 floating-point registers making the CPUs unable to work on both floating-point and SIMD data at the same time, and it only worked on integers. SSE floating-point instructions operate on a new independent register set, the XMM registers, and adds a few integer instructions that work on MMX registers.\nSSE was subsequently expanded by Intel to SSE2, SSE3, SSSE3 and SSE4. Because it supports floating-point math, it had wider applications than MMX and became more popular. The addition of integer support in SSE2 made MMX largely redundant, though further performance increases can be attained in some situations by using MMX in parallel with SSE operations.\nSSE was originally called Katmai New Instructions (KNI), Katmai being the code name for the first Pentium III core revision. During the Katmai project Intel sought to distinguish it from their earlier product line, particularly their flagship Pentium II. It was later renamed Internet Streaming SIMD Extensions (ISSE), then SSE. AMD eventually added support for SSE instructions, starting with its Athlon XP and Duron (Morgan core) processors.","accessed":{"date-parts":[["2024",4,14]]},"citation-key":"StreamingSIMDExtensions2023","container-title":"Wikipedia","issued":{"date-parts":[["2023",10,7]]},"language":"en","license":"Creative Commons Attribution-ShareAlike License","note":"Page Version ID: 1179009683","source":"Wikipedia","title":"Streaming SIMD Extensions","type":"entry-encyclopedia","URL":"https://en.wikipedia.org/w/index.php?title=Streaming_SIMD_Extensions&oldid=1179009683"},
  {"id":"tecJuly20212021","abstract":"Introducing citations!","accessed":{"date-parts":[["2024",3,5]]},"author":[{"family":"TEC","given":""}],"citation-key":"tecJuly20212021","issued":{"date-parts":[["2021",7,31]]},"language":"en","title":"July 2021","type":"webpage","URL":"https://blog.tecosaur.com/tmio/2021-07-31-citations.html"},
  {"id":"thalheimMic92ZigKo2024","abstract":"Linux kernel module written in Zig","accessed":{"date-parts":[["2024",5,11]]},"author":[{"family":"Thalheim","given":"J√∂rg"}],"citation-key":"thalheimMic92ZigKo2024","genre":"Makefile","issued":{"date-parts":[["2024",4,21]]},"license":"GPL-2.0","original-date":{"date-parts":[["2019",8,11]]},"source":"GitHub","title":"Mic92/zig.ko","type":"software","URL":"https://github.com/Mic92/zig.ko"},
  {"id":"wangyiWangyifudanWyhash2024","abstract":"The FASTEST QUALITY hash function, random number generators (PRNG) and hash map.","accessed":{"date-parts":[["2024",5,12]]},"author":[{"family":"WangYi","given":"Áéã‰∏Ä"}],"citation-key":"wangyiWangyifudanWyhash2024","genre":"C","issued":{"date-parts":[["2024",5,12]]},"license":"Unlicense","original-date":{"date-parts":[["2019",3,6]]},"source":"GitHub","title":"wangyi-fudan/wyhash","type":"software","URL":"https://github.com/wangyi-fudan/wyhash"},
  {"id":"WelcomeZigGuide2024","abstract":"Get started with the Zig programming language. Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"WelcomeZigGuide2024","issued":{"date-parts":[["2024",1,7]]},"language":"en","title":"Welcome | zig.guide","type":"webpage","URL":"https://zig.guide/"},
  {"id":"WhatOwnershipRust","accessed":{"date-parts":[["2024",5,11]]},"citation-key":"WhatOwnershipRust","title":"What is Ownership? - The Rust Programming Language","type":"webpage","URL":"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html"},
  {"id":"ZiglangZig2024","abstract":"General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"ZiglangZig2024","genre":"Zig","issued":{"date-parts":[["2024",3,2]]},"license":"MIT","original-date":{"date-parts":[["2015",8,6]]},"publisher":"Zig Programming Language","source":"GitHub","title":"ziglang/zig","type":"software","URL":"https://github.com/ziglang/zig"},
  {"id":"ZigMetaprogrammingGamedev","accessed":{"date-parts":[["2024",3,19]]},"citation-key":"ZigMetaprogrammingGamedev","title":"Zig Metaprogramming - Gamedev Guide","type":"webpage","URL":"https://ikrima.dev/dev-notes/zig/zig-metaprogramming/"},
  {"id":"ZigVSBenchmarks","accessed":{"date-parts":[["2024",5,5]]},"citation-key":"ZigVSBenchmarks","title":"Zig VS C benchmarks, Which programming language or compiler is faster","type":"webpage","URL":"https://programming-language-benchmarks.vercel.app/zig-vs-c"},
  {"id":"AllocatorsZigGuide2024","abstract":"The Zig standard library provides a pattern for allocating memory, which allows","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"AllocatorsZigGuide2024","issued":{"date-parts":[["2024",4,7]]},"language":"en","title":"Allocators | zig.guide","type":"webpage","URL":"https://zig.guide/standard-library/allocators/"},
  {"id":"AsyncAwaitSuspend","abstract":"This is a sub-task of #89.","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"AsyncAwaitSuspend","container-title":"GitHub","language":"en","title":"async/await/suspend/resume ¬∑ Issue #6025 ¬∑ ziglang/zig","type":"webpage","URL":"https://github.com/ziglang/zig/issues/6025"},
  {"id":"bakerLewissbakerCppcoro2024","abstract":"A library of C++ coroutine abstractions for the coroutines TS","accessed":{"date-parts":[["2024",5,31]]},"author":[{"family":"Baker","given":"Lewis"}],"citation-key":"bakerLewissbakerCppcoro2024","genre":"C++","issued":{"date-parts":[["2024",5,28]]},"license":"MIT","original-date":{"date-parts":[["2017",3,20]]},"source":"GitHub","title":"lewissbaker/cppcoro","type":"software","URL":"https://github.com/lewissbaker/cppcoro"},
  {"id":"boehlandJolbyObzig2023","abstract":"Org babel bindings for the Zig language","accessed":{"date-parts":[["2024",3,2]]},"author":[{"family":"Boehland","given":"Joel"}],"citation-key":"boehlandJolbyObzig2023","issued":{"date-parts":[["2023",12,22]]},"original-date":{"date-parts":[["2021",8,26]]},"title":"Jolby/ob-zig.el","type":"software","URL":"https://github.com/jolby/ob-zig.el"},
  {"id":"cinchblueWhatDifferenceAsymmetric2017","accessed":{"date-parts":[["2024",5,31]]},"author":[{"family":"CinchBlue","given":""}],"citation-key":"cinchblueWhatDifferenceAsymmetric2017","container-title":"Stack Overflow","genre":"Forum post","issued":{"date-parts":[["2017",1,27]]},"title":"What is the difference between asymmetric and symmetric coroutines?","type":"post","URL":"https://stackoverflow.com/q/41891989"},
  {"id":"ComptimeZigGuide2024","abstract":"Blocks of code may be forcibly executed at compile time using the","accessed":{"date-parts":[["2024",3,17]]},"citation-key":"ComptimeZigGuide2024","issued":{"date-parts":[["2024",3,2]]},"language":"english","title":"Comptime | zig.guide","type":"webpage","URL":"https://zig.guide/language-basics/comptime"},
  {"id":"CrossCompilationZig2024","abstract":"By default, Zig will compile for your combination of CPU and OS. This can be","accessed":{"date-parts":[["2024",3,5]]},"citation-key":"CrossCompilationZig2024","issued":{"date-parts":[["2024",3,2]]},"language":"english","title":"Cross compilation | zig.guide","type":"webpage","URL":"https://zig.guide/build-system/cross-compilation"},
  {"id":"DesignOverviewLibuv","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"DesignOverviewLibuv","title":"Design overview - libuv documentation","type":"webpage","URL":"https://docs.libuv.org/en/v1.x/design.html#the-i-o-loop"},
  {"id":"DocumentationZigProgramming","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"DocumentationZigProgramming","title":"Documentation - The Zig Programming Language","type":"webpage","URL":"https://ziglang.org/documentation/0.11.0/#Introduction"},
  {"id":"FiberComputerScience2024","abstract":"In computer science, a fiber is a particularly lightweight thread of execution.\nLike threads, fibers share address space. However, fibers use cooperative multitasking while threads use preemptive multitasking. Threads often depend on the kernel's thread scheduler to preempt a busy thread and resume another thread; fibers yield themselves to run another fiber while executing.","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"FiberComputerScience2024","container-title":"Wikipedia","issued":{"date-parts":[["2024",5,14]]},"language":"en","license":"Creative Commons Attribution-ShareAlike License","note":"Page Version ID: 1223783687","source":"Wikipedia","title":"Fiber (computer science)","type":"entry-encyclopedia","URL":"https://en.wikipedia.org/w/index.php?title=Fiber_(computer_science)&oldid=1223783687"},
  {"id":"GreenThreadExperiment","abstract":"Our goal with the green thread experiment was to understand the basic costs and benefits of introducing green threads to the .NET Runtime environment. Why green threads The .NET asynchronous progra...","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"GreenThreadExperiment","container-title":"GitHub","language":"en","title":"Green Thread Experiment Results ¬∑ Issue #2398 ¬∑ dotnet/runtimelab","type":"webpage","URL":"https://github.com/dotnet/runtimelab/issues/2398"},
  {"id":"HowPackageZig2024","abstract":"How to package a Zig source module  In a zig source file, write public zig functions or types. In build.zig add a module for the zig source file. Create a build.zig.zon for the package, include all the source and build files in the path.  Example  file: src/lib.zig, public say function.  const std = @import(\"std\");  pub fn say(what: []const u8) void {     std.debug.print(\"{s}\\n\", .{what}); }   file build.zig, src/lib.zig becomes speak module.  const std = @import(\"std\");  pub fn build(b: *std.Bu...","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"HowPackageZig2024","container-title":"Ziggit","issued":{"date-parts":[["2024",3,4]]},"language":"en","section":"Docs","title":"How to package a zig source module and how to use it - Docs","type":"webpage","URL":"https://ziggit.dev/t/how-to-package-a-zig-source-module-and-how-to-use-it/3457"},
  {"id":"HowUseReact","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"HowUseReact","title":"how do I use react with an express application? : r/reactjs","type":"webpage","URL":"https://www.reddit.com/r/reactjs/comments/16blsh3/how_do_i_use_react_with_an_express_application/"},
  {"id":"HyperlinksOrgMode","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"HyperlinksOrgMode","title":"Hyperlinks (Org Mode Compact Guide)","type":"webpage","URL":"https://orgmode.org/guide/Hyperlinks.html"},
  {"id":"HyperlinksOrgModea","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"HyperlinksOrgModea","title":"Hyperlinks (Org Mode Compact Guide)","type":"webpage","URL":"https://orgmode.org/guide/Hyperlinks.html"},
  {"id":"HyperlinksOrgModeb","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"HyperlinksOrgModeb","title":"Hyperlinks (Org Mode Compact Guide)","type":"webpage","URL":"https://orgmode.org/guide/Hyperlinks.html"},
  {"id":"HyperlinksOrgModec","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"HyperlinksOrgModec","title":"Hyperlinks (Org Mode Compact Guide)","type":"webpage","URL":"https://orgmode.org/guide/Hyperlinks.html"},
  {"id":"jamboreeAnswerHowStackless2015","accessed":{"date-parts":[["2024",5,31]]},"author":[{"family":"Jamboree","given":""}],"citation-key":"jamboreeAnswerHowStackless2015","container-title":"Stack Overflow","issued":{"date-parts":[["2015",3,11]]},"title":"Answer to \"How do stackless coroutines differ from stackful coroutines?\"","title-short":"Answer to \"How do stackless coroutines differ from stackful coroutines?","type":"post","URL":"https://stackoverflow.com/a/28989543"},
  {"id":"LearningZigHeap","accessed":{"date-parts":[["2024",3,3]]},"citation-key":"LearningZigHeap","title":"Learning Zig - Heap Memory & Allocators","type":"webpage","URL":"https://www.openmymind.net/learning_zig/heap_memory/"},
  {"id":"LibuvDocsSrc","abstract":"Cross-platform asynchronous I/O. Contribute to libuv/libuv development by creating an account on GitHub.","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"LibuvDocsSrc","container-title":"GitHub","language":"en","title":"libuv/docs/src/guide/basics.rst at v1.x ¬∑ libuv/libuv","type":"webpage","URL":"https://github.com/libuv/libuv/blob/v1.x/docs/src/guide/basics.rst"},
  {"id":"lynchSimpleExampleCalling2023","abstract":"Zig is a new, independently developed low-level programming language. It‚Äôs a modern reimagining of C that attempts to retain all of C‚Äôs performance benefits while also taking advantage of improvements in tooling and language design from the last 30 years.\nBecause Zig is designed to replace C, one of the first-class features is that you can call into C libraries from a Zig application. I couldn‚Äôt find any simple examples demonstrating Zig‚Äôs C interop functionality, so I decided to write my own.","accessed":{"date-parts":[["2024",5,31]]},"author":[{"family":"Lynch","given":"Michael"}],"citation-key":"lynchSimpleExampleCalling2023","issued":{"date-parts":[["2023",11,19]]},"language":"en","title":"A Simple Example of Calling a C Library from Zig","type":"webpage","URL":"https://mtlynch.io/notes/zig-call-c-simple/"},
  {"id":"MeasureElapsedTime","accessed":{"date-parts":[["2024",3,17]]},"citation-key":"MeasureElapsedTime","title":"Measure the elapsed time between two code sections - Zig cookbook","type":"webpage","URL":"https://zigcc.github.io/zig-cookbook/03-01-elapsed-time.html"},
  {"id":"mouraRevisitingCoroutines2009","abstract":"This article advocates the revival of coroutines as a convenient general control abstraction. After proposing a new classification of coroutines, we introduce the concept of full asymmetric coroutines and provide a precise definition for it through an operational semantics. We then demonstrate that full coroutines have an expressive power equivalent to one-shot continuations and one-shot delimited continuations. We also show that full asymmetric coroutines and one-shot delimited continuations have many similarities, and therefore present comparable benefits. Nevertheless, coroutines are easier implemented and understood, especially in the realm of procedural languages.","accessed":{"date-parts":[["2024",5,31]]},"author":[{"family":"Moura","given":"Ana L√∫cia De"},{"family":"Ierusalimschy","given":"Roberto"}],"citation-key":"mouraRevisitingCoroutines2009","container-title":"ACM Transactions on Programming Languages and Systems","container-title-short":"ACM Trans. Program. Lang. Syst.","DOI":"10.1145/1462166.1462167","ISSN":"0164-0925, 1558-4593","issue":"2","issued":{"date-parts":[["2009",2]]},"language":"en","page":"1-31","source":"DOI.org (Crossref)","title":"Revisiting coroutines","type":"article-journal","URL":"https://dl.acm.org/doi/10.1145/1462166.1462167","volume":"31"},
  {"id":"MultithreadingThereDifference","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"MultithreadingThereDifference","title":"multithreading - Is there a difference between fibers, coroutines and green threads and if that is so what is it? - Software Engineering Stack Exchange","type":"webpage","URL":"https://softwareengineering.stackexchange.com/questions/254140/is-there-a-difference-between-fibers-coroutines-and-green-threads-and-if-that-i"},
  {"id":"nieblerStructuredConcurrency2020","abstract":"TL;DR: ‚ÄúStructured concurrency‚Äù refers to a way to structure async computations so that child operations are guaranteed to complete before their parents, just the way a function is guaranteed‚Ä¶","accessed":{"date-parts":[["2024",5,31]]},"author":[{"family":"Niebler","given":"Eric"}],"citation-key":"nieblerStructuredConcurrency2020","container-title":"Eric Niebler","issued":{"date-parts":[["2020",11,9]]},"language":"en-US","title":"Structured Concurrency","type":"post-weblog","URL":"https://ericniebler.com/2020/11/08/structured-concurrency/"},
  {"id":"nuloCatdevnullAwesomezig2024","abstract":"A list of awesome projects related to Zig","accessed":{"date-parts":[["2024",5,31]]},"author":[{"family":"Nulo","given":""}],"citation-key":"nuloCatdevnullAwesomezig2024","issued":{"date-parts":[["2024",5,31]]},"license":"CC0-1.0","original-date":{"date-parts":[["2021",8,18]]},"source":"GitHub","title":"catdevnull/awesome-zig","type":"software","URL":"https://github.com/catdevnull/awesome-zig"},
  {"id":"olkAnswerHowStackless2015","accessed":{"date-parts":[["2024",5,31]]},"author":[{"family":"olk","given":""}],"citation-key":"olkAnswerHowStackless2015","container-title":"Stack Overflow","issued":{"date-parts":[["2015",3,12]]},"title":"Answer to \"How do stackless coroutines differ from stackful coroutines?\"","title-short":"Answer to \"How do stackless coroutines differ from stackful coroutines?","type":"post","URL":"https://stackoverflow.com/a/29007216"},
  {"id":"OrgMode","abstract":"Org-mode. Complex so you don't have to be. A versatile organisational system with immense capabilities.","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"OrgMode","language":"english","title":"Org Mode","type":"webpage","URL":"https://orgmode.org"},
  {"id":"OvenshBun2024","abstract":"Incredibly fast JavaScript runtime, bundler, test runner, and package manager ‚Äì all in one","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"OvenshBun2024","issued":{"date-parts":[["2024",3,2]]},"original-date":{"date-parts":[["2021",4,14]]},"publisher":"Bun","title":"Oven-sh/bun","type":"software","URL":"https://github.com/oven-sh/bun"},
  {"id":"PismiceHEIG_ZIG","accessed":{"date-parts":[["2024",3,19]]},"citation-key":"PismiceHEIG_ZIG","title":"Pismice/HEIG_ZIG","type":"webpage","URL":"https://github.com/Pismice/HEIG_ZIG"},
  {"id":"ProgrammerFriendlyAbstractionIo_uring","abstract":"The financial transactions database to power the next 30 years of Online Transaction Processing.","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"ProgrammerFriendlyAbstractionIo_uring","language":"en","title":"A Programmer-Friendly I/O Abstraction Over io_uring and kqueue","type":"webpage","URL":"https://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue"},
  {"id":"ProgrammingLua","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"ProgrammingLua","title":"Programming in Lua : 9.1","type":"webpage","URL":"https://www.lua.org/pil/9.1.html"},
  {"id":"rHowStacklessCoroutines2015","accessed":{"date-parts":[["2024",5,31]]},"author":[{"family":"R","given":"Jason"}],"citation-key":"rHowStacklessCoroutines2015","container-title":"Stack Overflow","genre":"Forum post","issued":{"date-parts":[["2015",3,11]]},"title":"How do stackless coroutines differ from stackful coroutines?","type":"post","URL":"https://stackoverflow.com/q/28977302"},
  {"id":"SourceCodeBlocks","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"SourceCodeBlocks","title":"C, C++, D Source Code Blocks in Org Mode","type":"webpage","URL":"https://orgmode.org/worg//org-contrib/babel/languages/ob-doc-C.html"},
  {"id":"ThreadingModelsJava2019","abstract":"A quick and practical overview of threading models in Java.","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"ThreadingModelsJava2019","issued":{"date-parts":[["2019",9,30]]},"language":"en-US","title":"Threading Models in Java | Baeldung","type":"webpage","URL":"https://www.baeldung.com/java-threading-models"},
  {"id":"ThreadsLibuvDocumentation","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"ThreadsLibuvDocumentation","title":"Threads - libuv documentation","type":"webpage","URL":"https://docs.libuv.org/en/v1.x/guide/threads.html"},
  {"id":"trebbienAnswerWhatDifference2017","accessed":{"date-parts":[["2024",5,31]]},"author":[{"family":"Trebbien","given":"Daniel"}],"citation-key":"trebbienAnswerWhatDifference2017","container-title":"Stack Overflow","issued":{"date-parts":[["2017",2,4]]},"title":"Answer to \"What is the difference between asymmetric and symmetric coroutines?\"","title-short":"Answer to \"What is the difference between asymmetric and symmetric coroutines?","type":"post","URL":"https://stackoverflow.com/a/42042904"},
  {"id":"UsingZigTranslateC2021","abstract":"@rep_stosq_void on Twitter posted this strange sample of C code, and I wanted to show my process of...","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"UsingZigTranslateC2021","container-title":"Zig NEWS","issued":{"date-parts":[["2021",10,9]]},"language":"en","title":"Using Zig and Translate-C to understand weird C code","type":"webpage","URL":"https://zig.news/sobeston/using-zig-and-translate-c-to-understand-weird-c-code-4f8"},
  {"id":"WebServerHello2023","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"WebServerHello2023","issued":{"date-parts":[["2023",10,7]]},"language":"en-US","title":"Web server ‚Äòhello world‚Äô benchmark : Go vs Node.js vs Nim vs Bun ‚Äì Daniel Lemire's blog","title-short":"Web server ‚Äòhello world‚Äô benchmark","type":"post-weblog","URL":"https://lemire.me/blog/2023/10/07/web-server-hello-world-benchmark-go-vs-node-js-vs-nim-vs-bun/"},
  {"id":"WelcomeZigGuide2024","abstract":"Get started with the Zig programming language. Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"WelcomeZigGuide2024","issued":{"date-parts":[["2024",1,7]]},"language":"english","title":"Welcome | zig.guide","type":"webpage","URL":"https://zig.guide/"},
  {"id":"WhatAreYou2023","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"WhatAreYou2023","container-title":"r/Zig","genre":"Reddit Post","issued":{"date-parts":[["2023",10,14]]},"title":"What are you doing for async?","type":"post","URL":"www.reddit.com/r/Zig/comments/177e4cb/what_are_you_doing_for_async/"},
  {"id":"WhatZigColorblind","abstract":"An introduction to Zig's curious concurrent programming API.","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"WhatZigColorblind","language":"en","title":"What is Zig's ‚ÄúColorblind‚Äù Async/Await?","type":"webpage","URL":"https://kristoff.it/blog/zig-colorblind-async-await/"},
  {"id":"xlrgAnswerWhatDifference2017","accessed":{"date-parts":[["2024",5,31]]},"author":[{"family":"xlrg","given":""}],"citation-key":"xlrgAnswerWhatDifference2017","container-title":"Stack Overflow","issued":{"date-parts":[["2017",4,6]]},"title":"Answer to \"What is the difference between asymmetric and symmetric coroutines?\"","title-short":"Answer to \"What is the difference between asymmetric and symmetric coroutines?","type":"post","URL":"https://stackoverflow.com/a/43248386"},
  {"id":"ZigBits0x4","abstract":"FOSS ‚Ä¢ Linux ‚Ä¢ Programming","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"ZigBits0x4","language":"en","title":"Zig Bits 0x4: Building an HTTP client/server from scratch - Orhun's Blog","title-short":"Zig Bits 0x4","type":"webpage","URL":"https://blog.orhun.dev"},
  {"id":"ZiglangZig2024","abstract":"General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.","accessed":{"date-parts":[["2024",3,2]]},"citation-key":"ZiglangZig2024","issued":{"date-parts":[["2024",3,2]]},"original-date":{"date-parts":[["2015",8,6]]},"publisher":"Zig Programming Language","title":"Ziglang/zig","type":"software","URL":"https://github.com/ziglang/zig"},
  {"id":"ZigMetaprogrammingGamedev","accessed":{"date-parts":[["2024",3,19]]},"citation-key":"ZigMetaprogrammingGamedev","title":"Zig Metaprogramming - Gamedev Guide","type":"webpage","URL":"https://ikrima.dev/dev-notes/zig/zig-metaprogramming/"},
  {"id":"ZigNamingConventions","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"ZigNamingConventions","title":"Zig naming conventions","type":"webpage","URL":"https://nathancraddock.com/blog/zig-naming-conventions/"},
  {"id":"ZigPackageManager2023","abstract":"The power hack and complexity of Package Manager in Zig     Ed Yu (@edyu on Github and @edyu on...","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"ZigPackageManager2023","container-title":"Zig NEWS","issued":{"date-parts":[["2023",6,27]]},"language":"en","title":"Zig Package Manager - WTF is Zon","type":"webpage","URL":"https://zig.news/edyu/zig-package-manager-wtf-is-zon-558e"},
  {"id":"ZigPackageManager2023a","abstract":"The power hack and complexity of Package Manager in Zig 0.11.0     Ed Yu (@edyu on Github and @edyu...","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"ZigPackageManager2023a","container-title":"Zig NEWS","issued":{"date-parts":[["2023",10,19]]},"language":"en","title":"Zig Package Manager 2 - WTF is Build.Zig.Zon and Build.Zig (0.11.0 Update)","type":"webpage","URL":"https://zig.news/edyu/zig-package-manager-wtf-is-zon-2-0110-update-1jo3"},
  {"id":"ZigzapZap2024","abstract":"blazingly fast backends in zig","accessed":{"date-parts":[["2024",5,31]]},"citation-key":"ZigzapZap2024","genre":"C","issued":{"date-parts":[["2024",5,31]]},"license":"MIT","original-date":{"date-parts":[["2023",1,12]]},"publisher":"ZAP","source":"GitHub","title":"zigzap/zap","type":"software","URL":"https://github.com/zigzap/zap"}

]
