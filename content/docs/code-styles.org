#+title: Code styles
#+weight: 4
#+bibliography: bibliography.bib

** Code styles
*** Style guide
For more details you can check the [[https://ziglang.org/documentation/master/#Style-Guide][official documentation]] on this topic.

**** fmt
Zig is very opinionated about code style, it is going to enforce his formating rules on you. This is done by their [[][own formatting]] tool. This tool should be integrated in the IDE you are using, if not you can trigger it manually using:
#+begin_src shell
  zig fmt file.zig
#+end_src
This util is going to enforce basic things for you like:
- Indentation
- Braces alignment
- Line length

**** Naming conventions
1. =TitleCaseTypeName=: for types and structs that are callable (for "classes" in other languages basically)
2. =camelCaseFunctionName=: for functions
3. =snake_case_variable_name=: for variables and everything else

*** undefined and null values
In Zig you can leave variables uninitialized, but you have to do that explicitly contrary to C where you can leave variables uninitialized and never truly notice it. Note that leaving the value [[https://ziglang.org/documentation/master/#undefined][undefined]] is going to leave the memory of this variable to some complete nonsense value (except in Debug mode where it will be [[https://github.com/ziglang/zig/issues/15603][set to 0xaa]]).

#+begin_src zig :imports '(std) :main 'yes :testsuite 'no
  const stdout = std.io.getStdOut();
  const my_var: u8 = undefined;
  try stdout.writer().print("my_var: {}\n", .{my_var});
#+end_src

#+RESULTS:
:  my_var: 0

This is to be avoided as much as possible, if you have some in your code it might makes sense to use an Optional type instead so that compiler can scream at you :)
#+begin_src zig :imports '(std) :main 'yes :testsuite 'no
  const stdout = std.io.getStdOut();
  const my_var: ?u8 = null;
  
  // .? is syntaxic sugar for "orelse unreachable" which is going
  // unreachable is going to emit a panic (unable to unwrapp null) !
  // THIS CODE WILL PANIC IF UNCOMMENTED
  // _ = my_var.?;
  
  // if value is "null" then "42" will be assigned
  const value: u8 = my_var orelse 42;
  
  // print 42 because value was null before
  try stdout.writer().print("my_var: {}\n", .{value});
#+end_src

*** Zen
Zig encourages you to use the [[https://ziglang.org/documentation/0.12.0/#Zen][Zen philosophy]], they reflect well the spirit behind Zig, here they are:
- Communicate intent precisely.
- Edge cases matter.
- Favor reading code over writing code.
- Only one obvious way to do things.
- Runtime crashes are better than bugs.
- Compile errors are better than runtime crashes.
- Incremental improvements.
- Avoid local maximums.
- Reduce the amount one must remember.
- Focus on code rather than style.
- Resource allocation may fail; resource deallocation must succeed.
- Memory is a resource.
- Together we serve the users.
