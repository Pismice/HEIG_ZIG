#+title: Tracking
#+weight: 9

*** Memory leak
**** C allocations
For high performances and very few safety checks, you might want to use the [[https://ziglang.org/documentation/master/std/#std.heap.c_allocator][std.heap.c allocator]].

Those allocations are not tracked by the Zig runtime, so you will have to use a tool like Valgrind to track memory leaks which can be done via the [[https://ziglang.org/documentation/master/std/#std.valgrind][std]].

TODO Show exemple where I run valgrind to detect c_allocator memory leaks.

**** Zig allocations
The General Purpose Allocator (GPA) is a general-purpose memory allocator that is used by the Zig standard library. Its advantages over the other implementations in the std it that it is designed for safety over performance.

Note that all those problems are given to us a runtime and not compile time.

It can in fact detect memory problems like:
- memory leaks
- use-after-free
- double-free

But it cannot yet detect things like data races (which you could think it could with the =.thread_safe= option but it does not).

What =.thread_safe= does is that it makes the allocator thread-safe, meaning that it can be used in a multi-threaded environment without any problem. If you don't and use the same allocator for multiples threads, the allocator might not behave correctly.

You can have more informations on the topic following a discussion I had on the Zig discord server [[https://discord.com/channels/605571803288698900/1237126868927512718][here]].

**** Memory leaks
In the exemple below, the memory allocated to *a* is freed (with *destroy* here), if you were to comment the *destroy* line, the GPA would detect a memory leak and tell you what memory leaked giving a stacktrace and the memory address of the leaked memory.
#+begin_src zig :imports '(std) :main 'yes :testsuite 'no
  var gpa = std.heap.GeneralPurposeAllocator(.{ .safety = true }){};
  defer {
      const status = gpa.deinit(); // deinit is going to detect memory leaks, calls gpa.detectLeaks() under the hood
  
      if (status == .leak) {
          std.debug.print("Memory leak detected\n", .{});
      } else {
          std.debug.print("No memory leak detected\n", .{});
      }
  }
  const allocator = gpa.allocator();
  
  const a = try allocator.create(u8);
  allocator.destroy(a); // Memory freed
#+end_src

**** Use after free
Following the previous exemple we are going to try to access the memory after it has been freed, this will result in a use-after-free error.
#+begin_src zig :imports '(std) :main 'yes :testsuite 'no
  var gpa = std.heap.GeneralPurposeAllocator(.{ .safety = true }){};
  defer _ = gpa.deinit(); // deinit is going to detect memory leaks, calls gpa.detectLeaks() under the hood
  
  const allocator = gpa.allocator();
  
  const a = try allocator.create(u8);
  allocator.destroy(a); // Memory freed
  
  a.* = 4; // USE AFTER FREE
#+end_src

**** Invalid free
By still keeping the previous exemples, we are going to double free and get an error.
#+begin_src zig :imports '(std) :main 'yes :testsuite 'no
  var gpa = std.heap.GeneralPurposeAllocator(.{ .safety = true }){};
  defer _ = gpa.deinit(); // deinit is going to detect memory leaks, calls gpa.detectLeaks() under the hood
  
  const allocator = gpa.allocator();
  
  const a = try allocator.create(u8);
  allocator.destroy(a); // Memory freed
  allocator.destroy(a); // DOUBLE FREE
#+end_src
