* Introduction

Nowadays, multiples languages has emmerge to compete with the well established C language.
In fact, C is wildlly used in many places, learn by a lot of engieener and used for many purpose.
C is a powerfull tool, /but with great power comes great responsibility/, in fact memory leaks can easly occurs by mistake.

That's why new languages comes to find a better way to handle errors and memory.
The Rust language rely strongly on his borrow checker to avoid safe memory but it comes at a cost: increased code complexity

In another case, the Zig language has a purpose to replace the C language.
Zig want to simplify the programming developpement experience with no hidden control flow and no macro to avoid complex mistake.
In comparaison with the Rust language, Zig use explicit memory allocation to prevent memory leaks.

In the sections below, certain aspects of this programming language will be explored in greater depth.

** What is not this documentation
This is *not* a begginner guide for Zig, this documentation want to go in depth in certain part of the language.

To understand what is described in this documentation, you should first read up on the basics of the Zig language, in particular its guide, which contains a wealth of information.
- [[https://zig.guide][Zig guide]]
- [[https://ziglang.org/documentation/0.11.0][Zig documentation]]

** How to use this documentation

parler du fait qu'on utilise org babel et comment faire pour tester les examples
et le fait qu'on utilise la version 0.11 pour les examples (mais que certains benchmark ont aussi utilis√© des version de dev)

** Build Emacs configuration

*** Install Zig emacs org babel plugin
Use ~C-c C-c~ (~ctrl-c ctrl-c~) to evaluate the code below.
It will add a shell interpreter inside org-babel configuration, it will be used when shell commands is evaluated.
#+begin_src emacs-lisp
  (add-to-list 'org-babel-load-languages '(shell . t))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
#+end_src

The shell command will clone a org babel zig plugin necessary to use this documentation with iterative programming.

The ~HEADER~ parameter below configure the directory path by default.
You can change the directory where the plugin will be installed (change the argument after the ~:dir~).
#+HEADER: :dir ~/CHANGE-ME
#+begin_src shell 
  git clone https://github.com/samuel-schlaeppy/ob-zig.el.git
#+end_src

*** Create emacs configuration file
To use the plugin installed before, you need to modify the first path to give the path where the plugin is installed (see section upper),
and a path to the Zig executable need also to be referenced.

After that, the following command ~C-c C-v t~ (~ctrl-c ctrl-v t~) will produce a ~zigIterativeProgramming.el~ file.
This file can be load from your emacs configuration (see section below).
#+begin_src emacs-lisp :tangle zigIterativeProgramming.el
  (setq base_dir "~/PATH-WHERE-THE-ZIG-PLUGIN-IS-INSTALLED/ob-zig.el")
  (setq org-babel-zig-compiler "PATH-TO-THE-ZIG-EXECUTABLE")
#+end_src

#+begin_src emacs-lisp :tangle zigIterativeProgramming.el
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (package-refresh-contents)
#+end_src

#+begin_src emacs-lisp :tangle zigIterativeProgramming.el
  (defun install-custom-pkg (pck)
    (if (featurep pck)
        (message "The package %s is already installed !" pck)
      (package-install pck)
      ))
#+end_src

#+begin_src emacs-lisp :tangle zigIterativeProgramming.el
  (install-custom-pkg 'zig-mode)
  (install-custom-pkg 'lsp-mode)
#+end_src

#+RESULTS:
: The package lsp-mode is already installed !

#+begin_src emacs-lisp :tangle zigIterativeProgramming.el
  (require 'lsp-mode)
  (add-hook 'zig-mode-hook #'lsp)
#+end_src

#+begin_src emacs-lisp :tangle zigIterativeProgramming.el
  (let ((local-file-path (expand-file-name "ob-zig.el" base_dir)))
    (setq org-babel-zig-compiler local-file-path)
    (load-file local-file-path)
  )
#+end_src

#+begin_src emacs-lisp :tangle zigIterativeProgramming.el
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-babel-load-languages '((C . t) (emacs-lisp . t) (shell . t))))
#+end_src

*** Execute configuration file from the configuration
You can put the code below in your ~init.el~ it will load the file produce before and load the necessary package to learn Zig interative programming.
But you need the specify the directory path of the ~zigIterativeProgramming.el~ file (first line below).
(the ~init.el~ can be found in ~~/.emacs.d/~ or can be created in ~~/.config/emacs/~
#+begin_src emacs-lisp
  (let ((file_dir "~/PATH-TO-THE-zigIterativeProgramming-file"))
  (load-file (expand-file-name "zigIterativeProgramming.el" file_dir)))
#+end_src

