@software{boehlandJolbyObzig2023,
  title = {Jolby/Ob-Zig.El},
  author = {Boehland, Joel},
  date = {2023-12-22T03:08:33Z},
  origdate = {2021-08-26T12:19:16Z},
  url = {https://github.com/jolby/ob-zig.el},
  urldate = {2024-03-02},
  abstract = {Org babel bindings for the Zig language}
}

@online{ComptimeZigGuide2024,
  title = {Comptime | Zig.Guide},
  date = {2024-03-02},
  url = {https://zig.guide/language-basics/comptime},
  urldate = {2024-03-17},
  abstract = {Blocks of code may be forcibly executed at compile time using the},
  langid = {english}
}

@online{CrossCompilationZig2024,
  title = {Cross Compilation | Zig.Guide},
  date = {2024-03-02},
  url = {https://zig.guide/build-system/cross-compilation},
  urldate = {2024-03-05},
  abstract = {By default, Zig will compile for your combination of CPU and OS. This can be},
  langid = {english}
}

@online{DocumentationZigProgramming,
  title = {Documentation - {{The Zig Programming Language}}},
  url = {https://ziglang.org/documentation/0.11.0/#Introduction},
  urldate = {2024-03-02}
}

@software{kootenDannyvankooten1brc2024,
  title = {Dannyvankooten/1brc},
  author = {family=Kooten, given=Danny, prefix=van, useprefix=false},
  date = {2024-03-11T10:57:19Z},
  origdate = {2024-01-03T15:48:12Z},
  url = {https://github.com/dannyvankooten/1brc},
  urldate = {2024-03-26},
  abstract = {C99 implementation of the 1 Billion Rows Challenge. 1Ô∏è‚É£üêùüèéÔ∏è Runs in \textasciitilde 1.7 seconds on my not-so-fast laptop CPU w/ 16GB RAM.},
  keywords = {1brc,c11}
}

@online{LearningZigHeap,
  title = {Learning {{Zig}} - {{Heap Memory}} \& {{Allocators}}},
  url = {https://www.openmymind.net/learning_zig/heap_memory/},
  urldate = {2024-03-03}
}

@inreference{LeibnizFormula2024,
  title = {Leibniz Formula for œÄ},
  booktitle = {Wikipedia},
  date = {2024-04-04T03:00:34Z},
  url = {https://en.wikipedia.org/w/index.php?title=Leibniz_formula_for_%CF%80&oldid=1217146933},
  urldate = {2024-04-14},
  abstract = {In mathematics, the Leibniz formula for œÄ, named after Gottfried Wilhelm Leibniz, states that an alternating series. It is sometimes called the Madhava‚ÄìLeibniz series as it was first discovered by the Indian mathematician Madhava of Sangamagrama or his followers in the 14th‚Äì15th century (see Madhava series), and was later independently rediscovered by James Gregory in 1671 and Leibniz in 1673. The Taylor series for the inverse tangent function, often called Gregory's series, is The Leibniz formula is the special case arctan‚Å°1=14œÄ.\{\textbackslash textstyle \textbackslash arctan 1=\{\textbackslash tfrac \{1\}\{4\}\}\textbackslash pi .\}It also is the Dirichlet L-series of the non-principal Dirichlet character of modulus 4 evaluated at s=1,\{\textbackslash displaystyle s=1,\} and therefore the value Œ≤(1) of the Dirichlet beta function.},
  langid = {english},
  annotation = {Page Version ID: 1217146933}
}

@online{MeasureElapsedTime,
  title = {Measure the Elapsed Time between Two Code Sections - {{Zig}} Cookbook},
  url = {https://zigcc.github.io/zig-cookbook/03-01-elapsed-time.html},
  urldate = {2024-03-17}
}

@software{mykolaichukAlmmiko1brczig2024,
  title = {Almmiko/1brc-Zig},
  author = {Mykolaichuk, Alexander},
  date = {2024-03-17T15:28:18Z},
  origdate = {2024-01-23T14:26:30Z},
  url = {https://github.com/almmiko/1brc-zig},
  urldate = {2024-03-26},
  abstract = {The One Billion Row Challenge ‚ö° -- how quickly 1B rows from a text file can be aggregated with Zig}
}

@online{NiklasheerSpeedcomparisonRepo,
  title = {Niklas-Heer/Speed-Comparison: {{A}} Repo Which Compares the Speed of Different Programming Languages.},
  url = {https://github.com/niklas-heer/speed-comparison/tree/master},
  urldate = {2024-03-26}
}

@online{OrgMode,
  title = {Org {{Mode}}},
  url = {https://orgmode.org},
  urldate = {2024-03-02},
  abstract = {Org-mode. Complex so you don't have to be. A versatile organisational system with immense capabilities.},
  langid = {english}
}

@software{OvenshBun2024,
  title = {Oven-Sh/Bun},
  date = {2024-03-02T14:11:47Z},
  origdate = {2021-04-14T00:48:17Z},
  url = {https://github.com/oven-sh/bun},
  urldate = {2024-03-02},
  abstract = {Incredibly fast JavaScript runtime, bundler, test runner, and package manager ‚Äì all in one},
  organization = {Bun},
  keywords = {bun,bundler,javascript,javascriptcore,jsx,nodejs,npm,react,transpiler,typescript,zig,ziglang}
}

@software{peterHyperfine2023,
  title = {Hyperfine},
  author = {Peter, David},
  date = {2023-03},
  origdate = {2018-01-13T15:49:54Z},
  url = {https://github.com/sharkdp/hyperfine},
  urldate = {2024-04-23},
  abstract = {A command-line benchmarking tool},
  version = {1.16.1}
}

@online{PismiceHEIG_ZIG,
  title = {Pismice/{{HEIG}}\_{{ZIG}}},
  url = {https://github.com/Pismice/HEIG_ZIG},
  urldate = {2024-03-19}
}

@article{puschelSpring2020Lecture,
  title = {Spring 2020 {{Lecture}}: {{SIMD}} Extensions, {{AVX}}, Compiler Vectorization},
  author = {P√ºschel, Markus and Zhang, Ce and Rivera, Joao and Karlas, Bojan},
  langid = {english}
}

@online{SourceCodeBlocks,
  title = {C, {{C}}++, {{D Source Code Blocks}} in {{Org Mode}}},
  url = {https://orgmode.org/worg//org-contrib/babel/languages/ob-doc-C.html},
  urldate = {2024-03-02}
}

@inreference{StreamingSIMDExtensions2023,
  title = {Streaming {{SIMD Extensions}}},
  booktitle = {Wikipedia},
  date = {2023-10-07T08:15:09Z},
  url = {https://en.wikipedia.org/w/index.php?title=Streaming_SIMD_Extensions&oldid=1179009683},
  urldate = {2024-04-14},
  abstract = {In computing, Streaming SIMD Extensions (SSE) is a single instruction, multiple data (SIMD) instruction set extension to the x86 architecture, designed by Intel and introduced in 1999 in their Pentium III series of central processing units (CPUs) shortly after the appearance of Advanced Micro Devices (AMD's) 3DNow!. SSE contains 70 new instructions (65 unique mnemonics using 70 encodings), most of which work on single precision floating-point data. SIMD instructions can greatly increase performance when exactly the same operations are to be performed on multiple data objects. Typical applications are digital signal processing and graphics processing. Intel's first IA-32 SIMD effort was the MMX instruction set. MMX had two main problems: it re-used existing x87 floating-point registers making the CPUs unable to work on both floating-point and SIMD data at the same time, and it only worked on integers. SSE floating-point instructions operate on a new independent register set, the XMM registers, and adds a few integer instructions that work on MMX registers. SSE was subsequently expanded by Intel to SSE2, SSE3, SSSE3 and SSE4. Because it supports floating-point math, it had wider applications than MMX and became more popular. The addition of integer support in SSE2 made MMX largely redundant, though further performance increases can be attained in some situations by using MMX in parallel with SSE operations. SSE was originally called Katmai New Instructions (KNI), Katmai being the code name for the first Pentium III core revision. During the Katmai project Intel sought to distinguish it from their earlier product line, particularly their flagship Pentium II. It was later renamed Internet Streaming SIMD Extensions (ISSE), then SSE. AMD eventually added support for SSE instructions, starting with its Athlon XP and Duron (Morgan core) processors.},
  langid = {english},
  annotation = {Page Version ID: 1179009683}
}

@online{WelcomeZigGuide2024,
  title = {Welcome | Zig.Guide},
  date = {2024-01-07},
  url = {https://zig.guide/},
  urldate = {2024-03-02},
  abstract = {Get started with the Zig programming language. Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.},
  langid = {english}
}

@software{ZiglangZig2024,
  title = {Ziglang/Zig},
  date = {2024-03-02T15:44:08Z},
  origdate = {2015-08-06T00:51:28Z},
  url = {https://github.com/ziglang/zig},
  urldate = {2024-03-02},
  abstract = {General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.},
  organization = {Zig Programming Language},
  keywords = {compiler,language,zig}
}

@online{ZigMetaprogrammingGamedev,
  title = {Zig {{Metaprogramming}} - {{Gamedev Guide}}},
  url = {https://ikrima.dev/dev-notes/zig/zig-metaprogramming/},
  urldate = {2024-03-19}
}
